// require("dotenv").config();
// const Groq = require("groq-sdk");
// const GeneratedContent = require("../models/GeneratedContent");

// // Initialize Groq client with the API key from environment variables
// const groq = new Groq({ apiKey: process.env.GROQ_API_KEY });

// // Generate dynamic content using Groq API
// const generateDynamicContent = async (req, res) => {
//   const { specialty } = req.body;

//   // Validate specialty
//   if (!specialty) {
//     return res.status(400).json({
//       success: false,
//       message: "Specialty is required.",
//     });
//   }

//   const specialties = [
//     "Frontend Development",
//     "Backend Development",
//     "Full Stack Development",
//     "Data Science",
//     "Machine Learning",
//     "DevOps",
//     "Cybersecurity",
//     "UI/UX Design",
//     "Graphics Design",
//   ];

//   if (!specialties.includes(specialty)) {
//     return res.status(400).json({
//       success: false,
//       message: "Invalid specialty provided.",
//     });
//   }

//   try {
//     // Structured prompt for better content generation with randomness
//     const randomTopics = [
//       "trends",
//       "challenges",
//       "best practices",
//       "emerging technologies",
//       "key tools",
//       "future of",
//       "impact on industry",
//       "tech",
//       "designs",
//       "development",
//       "data",
//       "security",
//       "innovation",
//       "solutions",
//     ];

//     // Randomly select one of the topics for variation
//     const randomTopic =
//       randomTopics[Math.floor(Math.random() * randomTopics.length)];
//     const specialtyPrompt = `Share a brief, inspiring post about ${specialty} with a focus on ${randomTopic}. Keep it clear, engaging, and easy to understand, making sure to wrap up your thoughts in one concise sentence that fits perfectly into a social media post.`;

//     // Call Groq API to generate content
//     const apiResponse = await groq.chat.completions.create({
//       messages: [
//         {
//           role: "user",
//           content: specialtyPrompt,
//         },
//       ],
//       model: "llama-3.3-70b-versatile",
//     });

//     const generatedText = apiResponse.choices[0]?.message?.content;

//     if (!generatedText) {
//       throw new Error("No content generated by the API.");
//     }

//     // Remove the prompt from the generated content
//     const contentWithoutPrompt = generatedText
//       .replace(specialtyPrompt, "")
//       .trim();

//     // Now, stop at the first period
//     const stopAtPeriod = contentWithoutPrompt.split(".")[0] + ".";

//     // Post-process to clean up unwanted parts
//     const cleanedText = stopAtPeriod
//       .replace(/[^a-zA-Z0-9 . , ']/g, "") // Remove special characters
//       .trim(); // Ensure no leading/trailing spaces

//     // Save to MongoDB
//     const newContent = new GeneratedContent({
//       specialty,
//       content: cleanedText,
//     });
//     await newContent.save();

//     // Only return the generated content (without showing the prompt)
//     res.status(200).json({
//       success: true,
//       data: cleanedText, // Only send back the generated content
//     });
//   } catch (error) {
//     console.error("Error generating content:", error.message);

//     const errorResponse = error.response?.data || {
//       message: error.message,
//     };

//     res.status(500).json({
//       success: false,
//       message: "Failed to generate content.",
//       error: errorResponse,
//     });
//   }
// };

// // Get all generated content
// const getAllGeneratedContent = async (req, res) => {
//   try {
//     const contents = await GeneratedContent.find().sort({ createdAt: -1 });
//     res.status(200).json({ success: true, contents });
//   } catch (error) {
//     console.error("Error fetching content:", error.message);
//     res.status(500).json({
//       success: false,
//       message: "Failed to fetch content.",
//     });
//   }
// };

// module.exports = { generateDynamicContent, getAllGeneratedContent };

require("dotenv").config();
const Groq = require("groq-sdk");
const GeneratedContent = require("../models/GeneratedContent");

const groq = new Groq({ apiKey: process.env.GROQ_API_KEY });

const generateDynamicContent = async (req, res) => {
  const { specialty } = req.body;

  if (!specialty) {
    return res
      .status(400)
      .json({ success: false, message: "Specialty is required." });
  }

  const specialties = [
    "Frontend Development",
    "Backend Development",
    "Full Stack Development",
    "Data Science",
    "Machine Learning",
    "DevOps",
    "Cybersecurity",
    "UI/UX Design",
    "Graphics Design",
  ];

  if (!specialties.includes(specialty)) {
    return res
      .status(400)
      .json({ success: false, message: "Invalid specialty provided." });
  }

  try {
    const randomTopics = [
      "current trends and insights",
      "biggest challenges and solutions",
      "essential best practices",
      "emerging technologies shaping the field",
      "must-have tools and frameworks",
      "future predictions and innovations",
      "industry impact and transformations",
      "cutting-edge security measures",
      "data-driven strategies and applications",
      "design principles and methodologies",
      "development techniques and approaches",
      "real-world case studies and success stories",
      "innovative solutions changing the game",
      "career growth and skill-building tips",
    ];

    const randomTopic =
      randomTopics[Math.floor(Math.random() * randomTopics.length)];

    const specialtyPrompt = `Create an engaging post about ${specialty} focused on ${randomTopic}. Structure it into three key sections:

    1. Key Insights - Summarize the main idea in a few clear points.  
    2. Why It Matters - Explain its importance in the tech industry.  
    3. How to Take Action - Offer a practical tip or next step for readers.  
    
    Keep it concise, compelling, and ideal for social media engagement.`;

    const apiResponse = await groq.completions.create({
      messages: [{ role: "user", content: specialtyPrompt }],
      model: "llama3-70b",
    });

    const generatedText = apiResponse?.choices?.[0]?.message?.content?.trim();

    if (!generatedText) {
      throw new Error("No content generated by the API.");
    }

    const sentences = generatedText.split(". ");
    const excerpt = sentences.slice(0, 3).join(". ") + ".";

    const cleanedText = excerpt.replace(/[^\w\s.,'!?]/g, "").trim();

    if (!cleanedText) {
      return res
        .status(400)
        .json({ success: false, message: "Generated content is empty." });
    }

    const newContent = new GeneratedContent({
      specialty,
      content: cleanedText,
    });
    await newContent.save();

    res.status(200).json({ success: true, data: cleanedText });
  } catch (error) {
    console.error("Error generating content:", error.message);
    res.status(500).json({
      success: false,
      message: "Failed to generate content.",
      error: error.message,
    });
  }
};

const getAllGeneratedContent = async (req, res) => {
  try {
    const contents = await GeneratedContent.find().sort({ createdAt: -1 });
    res.status(200).json({ success: true, contents });
  } catch (error) {
    console.error("Error fetching content:", error.message);
    res
      .status(500)
      .json({ success: false, message: "Failed to fetch content." });
  }
};

module.exports = { generateDynamicContent, getAllGeneratedContent };
