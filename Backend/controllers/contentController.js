require("dotenv").config();
const Groq = require("groq-sdk");
const GeneratedContent = require("../models/GeneratedContent");

// Initialize Groq client with the API key from environment variables
const groq = new Groq({ apiKey: process.env.GROQ_API_KEY });

// Generate dynamic content using Groq API
const generateDynamicContent = async (req, res) => {
  const { specialty } = req.body;

  // Validate specialty
  if (!specialty) {
    return res.status(400).json({
      success: false,
      message: "Specialty is required.",
    });
  }

  const specialties = [
    "Frontend Development",
    "Backend Development",
    "Full Stack Development",
    "Data Science",
    "Machine Learning",
    "DevOps",
    "Cybersecurity",
    "UI/UX Design",
    "Graphics Design",
  ];

  if (!specialties.includes(specialty)) {
    return res.status(400).json({
      success: false,
      message: "Invalid specialty provided.",
    });
  }

  try {
    // Structured prompt for better content generation with randomness
    const randomTopics = [
      "current trends and insights",
      "biggest challenges and solutions",
      "essential best practices",
      "emerging technologies shaping the field",
      "must-have tools and frameworks",
      "future predictions and innovations",
      "industry impact and transformations",
      "cutting-edge security measures",
      "data-driven strategies and applications",
      "design principles and methodologies",
      "development techniques and approaches",
      "real-world case studies and success stories",
      "innovative solutions changing the game",
      "career growth and skill-building tips",
    ];

    // Randomly select one of the topics for variation
    const randomTopic =
      randomTopics[Math.floor(Math.random() * randomTopics.length)];
    const specialtyPrompt = `Create an engaging and shareable social media post about ${specialty}, focusing on ${randomTopic}. Make it compelling, concise, and attention-grabbing. Use a conversational tone, include a strong hook, and end with a call to action.`;

    // Call Groq API to generate content
    const apiResponse = await groq.chat.completions.create({
      messages: [
        {
          role: "user",
          content: specialtyPrompt,
        },
      ],
      model: "llama-3.3-70b-versatile",
    });

    const generatedText = apiResponse.choices[0]?.message?.content;

    if (!generatedText) {
      throw new Error("No content generated by the API.");
    }

    // Remove the prompt from the generated content
    const contentWithoutPrompt = generatedText.replace(specialtyPrompt).trim();

    // Now, stop at the first period
    const stopAtPeriod = contentWithoutPrompt.split(".")[0] + ".";

    // Post-process to clean up unwanted parts
    const cleanedText = stopAtPeriod
      .replace() // Remove special characters
      .trim(); // Ensure no leading/trailing spaces

    // Save to MongoDB
    const newContent = new GeneratedContent({
      specialty,
      content: cleanedText,
    });
    await newContent.save();

    // Only return the generated content (without showing the prompt)
    res.status(200).json({
      success: true,
      data: cleanedText, // Only send back the generated content
    });
  } catch (error) {
    console.error("Error generating content:", error.message);

    const errorResponse = error.response?.data || {
      message: error.message,
    };

    res.status(500).json({
      success: false,
      message: "Failed to generate content.",
      error: errorResponse,
    });
  }
};

// Get all generated content
const getAllGeneratedContent = async (req, res) => {
  try {
    const contents = await GeneratedContent.find().sort({ createdAt: -1 });
    res.status(200).json({ success: true, contents });
  } catch (error) {
    console.error("Error fetching content:", error.message);
    res.status(500).json({
      success: false,
      message: "Failed to fetch content.",
    });
  }
};

module.exports = { generateDynamicContent, getAllGeneratedContent };
